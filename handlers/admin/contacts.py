from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from keyboards import inline, reply, builders
from filters.is_admin import IsAdmin
from data.requests import set_contact, get_contacts, delete_contacts, edit_contact


admin_hint = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏üëá"
router = Router()

contact_type_hint = ("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ; –¢–µ–ª–µ—Ñ–æ–Ω; –ê–¥—Ä–µ—Å; –ì—Ä–∞—Ñ–∏–∫ "
"—Ä–∞–±–æ—Ç—ã; –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç, –∏–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å")

class AddContact(StatesGroup):
    contact_type = State()
    contact_value = State()


class EditContact(StatesGroup):
    _id = State()
    contact_type = State()
    contact_value = State()
    

@router.callback_query(IsAdmin(), F.data == "add_contact")
async def add_more_contact(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddContact.contact_type)
    await callback.message.edit_text(contact_type_hint, reply_markup=inline.cancel_action)

@router.message(IsAdmin(), AddContact.contact_type)
async def add_contact_type(message: Message, state: FSMContext):
    await state.update_data(contact_type=message.text)
    await state.set_state(AddContact.contact_value)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', reply_markup=inline.cancel_action)

@router.message(IsAdmin(), AddContact.contact_value)
async def add_contact_value(message: Message, state: FSMContext):
    await state.update_data(value=message.text)
    data = await state.get_data()
    await set_contact(data)
    await state.clear()
    await message.answer('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    contacts = await get_contacts()   
    contact_info = "\n".join([f"{contact.contact_type}: {contact.value}" for contact in contacts])
    await message.answer(f"<b>–ú–æ—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b>\n{contact_info}", 
                         reply_markup=inline.contacts)
    
@router.callback_query(IsAdmin(), F.data == "edit_contacts")
async def edit_contacts(callback: CallbackQuery):
    await callback.message.delete_reply_markup()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è", 
                                  reply_markup=await builders.edit_contact())
    
@router.callback_query(IsAdmin(), F.data.startswith("edit_contact_"))
async def edit_contact_selected(callback: CallbackQuery, state: FSMContext):
    await state.update_data(_id=callback.data.split('_')[2])
    await state.set_state(EditContact.contact_type)
    await callback.message.edit_text(contact_type_hint, reply_markup=inline.cancel_action)
   
@router.message(IsAdmin(), EditContact.contact_type)
async def edit_contact_type(message: Message, state: FSMContext):
    await state.update_data(contact_type=message.text)
    await state.set_state(EditContact.contact_value)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', reply_markup=inline.cancel_action)
    
@router.message(IsAdmin(), EditContact.contact_value)
async def edit_contact_value(message: Message, state: FSMContext):
    await state.update_data(value=message.text)
    data = await state.get_data()
    await edit_contact(data)
    await state.clear()
    await message.answer('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞')
    contacts = await get_contacts()
    contact_info = "\n".join([f"{contact.contact_type}: {contact.value}" for contact in contacts])
    await message.answer(f"–ú–æ—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n{contact_info}", 
                         reply_markup=inline.contacts)
    
@router.callback_query(IsAdmin(), F.data == "predelete_contact")
async def predelete_contact(callback: CallbackQuery):
    await callback.message.edit_text("–≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç –≤—Å—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –í—ã —É–≤–µ—Ä–µ–Ω—ã?",
                                  reply_markup=inline.confirm_delete_contacts)
    
@router.callback_query(IsAdmin(), F.data == "delete_contacts")
async def confirmed_delete_contacts(callback: CallbackQuery):
    await callback.message.delete_reply_markup()
    await callback.message.delete()
    await delete_contacts()
    await callback.answer("–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")   
    await callback.message.answer(admin_hint, reply_markup=reply.admin_main)