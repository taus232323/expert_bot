from contextlib import suppress

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram.exceptions import TelegramForbiddenError

from settings import TOKEN
from keyboards import inline, reply
from filters.is_admin import IsAdmin
from data.requests import get_paid_days, update_paid_days, get_admins_to_remind, get_users, get_user_by_id, set_admin


days_scheduler = AsyncIOScheduler(timezone='Europe/Moscow')
router = Router()

support_hint = (
    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏, –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–º–æ-–¥–æ—Å—Ç—É–ø–∞, —á—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ, "
    "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –í–∞—à–µ–≥–æ –±–æ—Ç–∞. –¢–∞–∫ –∂–µ –í—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ "
    "–∫ –í–∞—à–µ–º—É –±–æ—Ç—É")

class AddAdmin(StatesGroup):
    admin_id = State()
    
    
@router.message(IsAdmin(), F.text.lower() == "üõ† –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_selected(message: Message, bot: Bot):
    bot_me = await bot.get_me()
    paid_days = await get_paid_days()
    await message.answer(
        f"üõ† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: <b>{paid_days}</b>\n")
    await message.answer(support_hint, reply_markup=await inline.go_to_support(bot_me.username))

@router.callback_query(IsAdmin(), F.data == "new_admin")
async def add_admin_chosed(callback: CallbackQuery, state: FSMContext):
    users = await get_users()
    user_info = "\n".join([f"id:{user.id} @{user.username}" for user in users])
    await callback.message.edit_text(user_info)
    await state.set_state(AddAdmin.admin_id)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')

@router.message(IsAdmin(), AddAdmin.admin_id)
async def add_new_admin(message: Message, state: FSMContext, bot: Bot):
    if message.text.isdigit():
        admin_id = int(message.text)
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ')
        return
    user = await get_user_by_id(admin_id)
    await set_admin(user.tg_id)
    await message.answer(f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.username} –¥–æ–±–∞–≤–ª–µ–Ω')
    try:
        await bot.send_message(user.tg_id, '–í—ã —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', reply_markup=reply.admin_main)
    except:
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
  
async def change_paid_days(days: int):
    current_paid_days = await get_paid_days()
    if current_paid_days == 0 and days < 0:
        await send_lease_reminder()
        days_scheduler.remove_all_jobs()
    elif current_paid_days >= 0:
        new_paid_days = current_paid_days + int(days)
        await update_paid_days(new_paid_days)
        if not days_scheduler.running:
            await schedule_decrease_paid_days()

async def send_lease_reminder():
    bot = Bot(TOKEN)
    bot_me = await bot.get_me()
    ADMIN_USER_IDS = await get_admins_to_remind()
    for admin in ADMIN_USER_IDS:
        try:
            await bot.send_message(admin, '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –µ—ë –ø—Ä–æ–¥–ª–µ–Ω–∏—è',
                                   reply_markup=await inline.go_to_support(bot_me.username))
        except TelegramForbiddenError:
            print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin}')
    await bot.session.close()  
   
async def schedule_decrease_paid_days():
    days_scheduler.add_job(change_paid_days, CronTrigger(hour=17, minute=7), args=[-1])
  