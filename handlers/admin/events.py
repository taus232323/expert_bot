from contextlib import suppress

from datetime import datetime, timedelta
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram.exceptions import TelegramForbiddenError

from settings import TOKEN
from keyboards import inline, builders, reply
from filters.is_admin import IsAdmin
from data.requests import (
    set_event, delete_event, edit_event, get_participants, get_event_by_id, get_admins, get_max_event_id,
    set_base_reminders, set_custom_reminder, get_event_reminders, get_events, get_reminder_message,
    get_users, get_max_user_id) 


router = Router()
events_scheduler = AsyncIOScheduler(timezone='Europe/Moscow')
admin_hint = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏üëá"
reminder_hint = (
            f'‚ö†Ô∏è –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞–ø–∏—Å–∞–≤—à–∏–º—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.\n\n'
            f'<b>–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–Ω–æ —Ç–∞–∫–æ–µ:</b>\n\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –∑–Ω–∞–Ω–∏–π —É–∂–µ '
            '–Ω–∞ –ø–æ—Ä–æ–≥–µ! –°–∫–æ—Ä–æ —Å—Ç–∞—Ä—Ç—É–µ—Ç [–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è], –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—à–∏—Ä–∏—Ç –≤–∞—à–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –∏ '
            '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —Ü–µ–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã. –ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å [–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è]'
            f'\n\n‚ö†Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ —Å—É—Ç–∫–∏, –∑–∞ 2 —á–∞—Å–∞ –∏ '
            f'–∑–∞ 5 –º–∏–Ω—É—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É:\n"‚ôªÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è". \n\n–ú–æ–∂–µ—Ç–µ –∫–∞–∂–¥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ '
            '–æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç—å, –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç, —Å—Å—ã–ª–∫–∏ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â—ë, –∏ –∑–∞–¥–∞—Ç—å —Å–≤–æ—ë '
            f'–≤—Ä–µ–º—è, –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:\n"‚öô –ù–∞—Å—Ç—Ä–æ–∏—Ç—å '
            f'—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ —Å–æ–±—ã—Ç–∏—è —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∏—Ö '
            '–ø–µ—Ä–∏–æ–¥–æ–≤\n\n‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∞—à–µ–π –±–∞–∑—ã, –∫—Ç–æ '
            '–∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. –ß—Ç–æ–±—ã –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —Ä–∞—Å—Å—ã–ª–∫–∏.'
            f'\n\n<u>–ï—Å–ª–∏ –í—ã —Å–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±–µ—Ä–∏—Ç–µ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–µ –±—É–¥—É—Ç!</u>')



class AddEvent(StatesGroup):
    title = State()
    description = State()
    date = State()
        
    
class EditEventTitle(StatesGroup):
    event = State()
    title = State()
    
    
class EditEventDescription(StatesGroup):
    event = State()
    description = State()
    
    
class EditEventDate(StatesGroup):
    event = State()
    date = State()
    
    
class EventReminder(StatesGroup):
    event = State()
    reminder_num = State()
    time = State()
    message = State()
    

@router.callback_query(IsAdmin(), F.data == "add_event")
async def add_more_event(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddEvent.title)
    await callback.message.edit_text(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è. –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é –µ–≥–æ –¥–ª–∏–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 40 –∑–Ω–∞–∫–æ–≤', 
        reply_markup=inline.cancel_action)
    
@router.message(IsAdmin(), AddEvent.title)
async def add_event_title(message: Message, state: FSMContext):
    if len(message.text) > 40:
        await message.answer('–Ø –∂–µ –ø—Ä–æ—Å–∏–ª –Ω–µ –±–æ–ª—å—à–µ 40 –∑–Ω–∞–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', 
                             reply_markup=inline.cancel_action)
        return
    await state.update_data(title=message.text)
    await state.set_state(AddEvent.description)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è', reply_markup=inline.cancel_action)
    
@router.message(IsAdmin(), AddEvent.description)
async def add_event_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddEvent.date)
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú', reply_markup=inline.cancel_action)
    
@router.message(IsAdmin(), AddEvent.date)
async def add_event_date(message: Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text, f'%d.%m.%Y %H:%M')
    except ValueError:
        await message.answer(
            f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú')
        return
    if date < datetime.now() + timedelta(days=1):
        await message.answer('–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º –Ω–∞ 24 —á–∞—Å–∞ –ø–æ–∑–∂–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!')
        return
    await state.update_data(date=date)
    data = await state.get_data()
    await set_event(data)
    await state.clear()
    event_id = await get_max_event_id()
    await message.answer('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –•–æ—Ç–∏—Ç–µ –ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ –í–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤?',
                         reply_markup=await inline.suggest_invite(event_id))

@router.callback_query(IsAdmin(), F.data.startswith('send_invitations_'))
async def send_invitations(callback: CallbackQuery, bot: Bot):
    event_id = callback.data.split('_')[2]
    event = await get_event_by_id(event_id)
    await callback.message.edit_text('–ü–æ–¥–æ–∂–¥–∏—Ç–µ... –∏–¥—ë—Ç —Ä–∞—Å—Å—ã–ª–∫–∞üîä.')
    max_id = await get_max_user_id()
    message = f'<b>{event.title}</b>\n\n{event.description}\n\n<b>{event.date}</b>'
    fail = 0
    for user in await get_users():
        try:
            await bot.send_message(chat_id=user.tg_id, text=message, reply_markup=await inline.enroll_user(event_id))
        except:
            fail += 1
            pass
    success = max_id - fail
    await callback.message.answer(
        f'üéâ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: <b>{success}</b> \n'
        f'‚õîÔ∏è –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, –æ—Ç–∫–ª—é—á–∏–ª–∏ –±–æ—Ç–∞: <b>{fail}</b>')
    await callback.message.answer(reminder_hint, reply_markup=await inline.choose_reminders(event_id))
    
@router.callback_query(IsAdmin(), F.data.startswith('choose_reminders_'))
async def choose_reminders(callback: CallbackQuery):
    event_id = callback.data.split('_')[2]
    await callback.message.edit_text(reminder_hint, reply_markup=await inline.choose_reminders(event_id))

@router.callback_query(IsAdmin(), F.data.startswith('base_reminders_'))
async def base_reminders(callback: CallbackQuery):
    event_id = callback.data.split('_')[2]
    await schedule_base_event_reminders(event_id)
    await callback.message.edit_text('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!', reply_markup=reply.admin_main)
    
@router.callback_query(IsAdmin(), F.data.startswith('custom_reminders_'))
async def custom_reminders(callback: CallbackQuery):   
    event_id = callback.data.split('_')[2]
    await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:',
                                reply_markup=await inline.event_reminders_kb(event_id))
 
@router.callback_query(IsAdmin(), F.data.startswith("edit_reminders_")) 
async def edit_reminders(callback: CallbackQuery):
    event_id = callback.data.split('_')[2]
    await set_base_reminders(event_id)
    await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:',
                                reply_markup=await inline.event_reminders_kb(event_id))
    
@router.callback_query(IsAdmin(), F.data.startswith("set_reminder_"))
async def set_reminder(callback: CallbackQuery, state: FSMContext):
    reminder_num = int(callback.data.split('_')[2])
    event_id = callback.data.split('_')[3]
    await set_base_reminders(event_id)
    await state.update_data(event=event_id, reminder_num=reminder_num)
    term = ''
    if reminder_num == 1:
        term = '–¥–Ω–µ–π'
    if reminder_num == 2:
        term = '—á–∞—Å–æ–≤'
    if reminder_num == 3:
        term = '–º–∏–Ω—É—Ç'
    await callback.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ –∑–∞ —Å–∫–æ–ª—å–∫–æ {term} –¥–æ —Å–æ–±—ã—Ç–∏—è —è –æ—Ç–ø—Ä–∞–≤–ª—é —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
                                     reply_markup=inline.cancel_action)
    await state.set_state(EventReminder.time)
    
@router.message(IsAdmin(), EventReminder.time)
async def set_reminder_time(message: Message, state: FSMContext):
    try:
        time = int(message.text)
    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        return
    if time < 1:
        await message.answer('–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è')
        return
    data = await state.get_data()
    event_id = data['event']
    reminder_num = data['reminder_num']
    reminder_time = None
    event = await get_event_by_id(event_id)
    if reminder_num == 1:
        if event.date - timedelta(days=time) < datetime.now():
            await message.answer('–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–Ω—å—à–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            return
        reminder_time = event.date - timedelta(days=time)
    if reminder_num == 2:
        reminder_time = event.date - timedelta(hours=time)
    if reminder_num == 3:
        reminder_time = event.date - timedelta(minutes=time)
    await state.update_data(time=reminder_time)
    await state.set_state(EventReminder.message)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏e, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ä–æ–∫')
    
@router.message(IsAdmin(), EventReminder.message)
async def set_reminder_message(message: Message, state: FSMContext):
    await state.update_data(message=message.text)
    data = await state.get_data()
    await set_custom_reminder(data)
    await state.clear()
    event_id = data['event']
    await schedule_custom_reminder(event_id)
    await message.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ. –ò–∑–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥–æ–µ?', 
                         reply_markup=await inline.event_reminders_kb(event_id))
    
@router.callback_query(IsAdmin(), F.data.startswith("predelete_event_"))
async def predelete_event_selected(callback: CallbackQuery):
    event_id = callback.data.split('_')[2]
    warning = ('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤–º–µ—Å—Ç–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –í–∞—à–∏–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏? '
    '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ')
    await callback.message.edit_text(warning, reply_markup=await inline.confirm_delete_event(event_id))
    
@router.callback_query(IsAdmin(), F.data.startswith("delete_event_"))
async def delete_event_selected(callback: CallbackQuery):
    event_id = callback.data.split('_')[2]
    await delete_event(event_id)
    await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
    markup = await builders.admin_get_events()
    num_buttons = sum(len(row) for row in markup.inline_keyboard)
    if num_buttons > 2: 
        await callback.message.edit_text("–ú–æ–∏ —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", reply_markup=markup)    
    else:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", reply_markup=inline.new_event)
    
@router.callback_query(IsAdmin(), F.data.startswith("edit_event_"))
async def edit_event_selected(callback: CallbackQuery, state: FSMContext):
    event_id = callback.data.split('_')[2]
    await callback.message.edit_text('–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=await inline.edit_event(event_id))

@router.callback_query(IsAdmin(), F.data.startswith("edit_title_"))
async def edit_event_title(callback: CallbackQuery, state: FSMContext):
    await state.update_data(event=callback.data.split('_')[2])
    await state.set_state(EditEventTitle.title)
    await callback.message.edit_text(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è. –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é –µ–≥–æ –¥–ª–∏–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 40 –∑–Ω–∞–∫–æ–≤', 
        reply_markup=inline.cancel_action)
    
@router.message(IsAdmin(), EditEventTitle.title)
async def edit_event_title(message: Message, state: FSMContext):
    if len(message.text) > 40:
        await message.answer('–Ø –∂–µ –ø—Ä–æ—Å–∏–ª –Ω–µ –±–æ–ª—å—à–µ 40 –∑–Ω–∞–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', 
                             reply_markup=inline.cancel_action)
        return
    await state.update_data(title=message.text)
    data = await state.get_data()
    await state.clear()
    event_id = data['event']
    await edit_event(data)
    await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ. –ñ–µ–ª–∞–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë?', 
                         reply_markup=await inline.edit_event(event_id))
   
@router.callback_query(IsAdmin(), F.data.startswith("edit_description_"))
async def edit_event_title(callback: CallbackQuery, state: FSMContext):
    await state.update_data(event=callback.data.split('_')[2])   
    await state.set_state(EditEventDescription.description)
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è', reply_markup=inline.cancel_action)
    
@router.message(IsAdmin(), EditEventDescription.description)
async def edit_event_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    data = await state.get_data()
    await state.clear()
    event_id = data['event']
    await edit_event(data)
    await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ. –ñ–µ–ª–∞–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë?', 
                         reply_markup=await inline.edit_event(event_id))

@router.callback_query(IsAdmin(), F.data.startswith("edit_date_"))
async def edit_event_title(callback: CallbackQuery, state: FSMContext):
    await state.update_data(event=callback.data.split('_')[2])     
    await state.set_state(EditEventDate.date)
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú", 
                                     reply_markup=inline.cancel_action)
    
@router.message(IsAdmin(), EditEventDate.date)
async def edit_event_date(message: Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text, f'%d.%m.%Y %H:%M')
    except ValueError:
        await message.answer(
            f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú')
        return
    if date < datetime.now()  + timedelta(days=1):
        await message.answer('–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º –Ω–∞ 24 —á–∞—Å–∞ –ø–æ–∑–∂–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏')
        return
    await state.update_data(date=date)
    data = await state.get_data()
    event_id = data['event']
    await edit_event(data)
    await state.clear()
    reminders = await get_event_reminders(event_id)
    if reminders:
        await schedule_custom_reminder(event_id)
    else:
        await schedule_base_event_reminders(event_id)
    await message.answer('–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞.  –ñ–µ–ª–∞–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë?', 
                         reply_markup=await inline.edit_event(event_id))

@router.callback_query(IsAdmin(), F.data.startswith("participants_"))
async def check_participants(callback: CallbackQuery):
    event_id = callback.data.split("_")[1]
    participants = await get_participants(event_id)
    event = await get_event_by_id(event_id)
    if not participants:
        await callback.message.edit_text("–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç", reply_markup=inline.cancel_action)
    else:
        participant_text_list = []
        for i, participant in enumerate(participants, 1):
            username_or_id = participant.username if participant.username else participant.tg_id
            participant_text_list.append(f"{i}. @{username_or_id}")
            participant_text = "\n".join(participant_text_list)
            formatted_date = event.date.strftime('%d-%m-%Y %H:%M')
            message_text = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–ø–∏—Å–∞–≤—à–∏–µ—Å—è –Ω–∞\n<b>{event.title}</b>,"
                    f"–∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–æ–∏—Ç—Å—è <b>{formatted_date}</b>:\n\n" + participant_text)
            await callback.message.edit_text(message_text, reply_markup=inline.cancel_action)

async def send_admin_reminder(event_id):
    bot = Bot(token=TOKEN)
    bot.default.parse_mode = 'HTML'
    ADMIN_USER_IDS = await get_admins()
    event = await get_event_by_id(event_id)
    participants = await get_participants(event_id)
    participant_text_list = []
    for i, participant in enumerate(participants, 1):
        username_or_id = participant.username if participant.username else participant.tg_id
        participant_text_list.append(f"{i}. @{username_or_id}")
    participant_text = "\n".join(participant_text_list)
    formatted_date = event.date.strftime('%d-%m-%Y %H:%M')
    message_text = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–ø–∏—Å–∞–≤—à–∏–µ—Å—è –Ω–∞\n<b>{event.title}</b>,"
                    f"–∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–æ–∏—Ç—Å—è <b>{formatted_date}</b>:\n\n" + participant_text)
    for admin in ADMIN_USER_IDS:
        with suppress(TelegramForbiddenError):
            await bot.send_message(chat_id=admin, text=message_text)
    await bot.session.close() 

async def send_base_participants_reminder(event_id):
    bot = Bot(token=TOKEN, parse_mode='HTML')
    event = await get_event_by_id(event_id)
    participants = await get_participants(event_id)
    admins = await get_admins()
    fail  = 0
    success = 0
    formatted_date = event.date.strftime(f'%d.%m.%Y –≤ %H:%M')
    default_newsletter = ('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ‚ùó –£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –∑–Ω–∞–Ω–∏–π —É–∂–µ –Ω–∞ –ø–æ—Ä–æ–≥–µ‚ùó –°–∫–æ—Ä–æ —Å—Ç–∞—Ä—Ç—É–µ—Ç '
        f'<b>{event.title}</b>, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—à–∏—Ä–∏—Ç –≤–∞—à–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —Ü–µ–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ãüëå. '
        f'–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å <b>{formatted_date}</b>')
    for participant in participants:
        try:
            await bot.send_message(chat_id=participant.tg_id, text=default_newsletter)
            success += 1
        except TelegramForbiddenError:
            fail += 1
    with suppress(TelegramForbiddenError):
        for admin in admins:
            await bot.send_message(chat_id=admin, 
                text= f'üéâ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ {event.title} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n '
                f'‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: <b>{success}</b>\n‚õîÔ∏è –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, –æ—Ç–∫–ª—é—á–∏–ª–∏ –±–æ—Ç–∞: <b>{fail}</b>')
    await bot.session.close()

async def schedule_base_event_reminders(event_id):
    event = await get_event_by_id(event_id)
    if event.date > datetime.now():
        events_scheduler.add_job(send_base_participants_reminder, 'date', 
                            run_date=event.date - timedelta(days=1), 
                            args=(event.id,), id=f'1_day_{event_id}', replace_existing=True)
        events_scheduler.add_job(send_base_participants_reminder, 'date',
                            run_date=event.date - timedelta(hours=2),
                            args=(event.id,), id=f'2_hours_{event_id}', replace_existing=True)
        events_scheduler.add_job(send_base_participants_reminder, 'date',
                            run_date=event.date - timedelta(minutes=5),
                            args=(event.id,), id=f'5_minutes_{event_id}', replace_existing=True)
        evening_reminder_trigger = CronTrigger(hour=19, minute=0, end_date=event.date, jitter=300)
        events_scheduler.add_job(send_admin_reminder, evening_reminder_trigger, args=(event.id,),
                                id=f'cron_event_{event_id}', replace_existing=True)
    
async def send_custom_participants_reminder(event_id, reminder_num):
    bot = Bot(token=TOKEN, parse_mode='HTML')
    event = await get_event_by_id(event_id)
    participants = await get_participants(event_id)
    admins = await get_admins()
    message = await get_reminder_message(event_id, reminder_num)
    success = 0
    fail = 0
    for participant in participants:
        try:
            await bot.send_message(chat_id=participant.tg_id, text=message)
            success += 1
        except TelegramForbiddenError:
            fail += 1
    with suppress(TelegramForbiddenError):
        for admin in admins:
            await bot.send_message(chat_id=admin, 
                text= f'üéâ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ {event.title} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n '
                f'‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: <b>{success}</b>\n‚õîÔ∏è –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, –æ—Ç–∫–ª—é—á–∏–ª–∏ –±–æ—Ç–∞: <b>{fail}</b>')
    await bot.session.close()    
    
async def schedule_custom_reminder(event_id):
    event = await get_event_by_id(event_id)
    if event.date > datetime.now():
        reminders = await get_event_reminders(event_id)
        for reminder in reminders:
            events_scheduler.add_job(send_custom_participants_reminder, 'date',
                                run_date=reminder.time,
                                args=(event_id, reminder.reminder_num), 
                                id=f'reminder_{reminder.id}',
                                replace_existing=True)
        evening_reminder_trigger = CronTrigger(hour=19, minute=0, end_date=event.date)
        events_scheduler.add_job(send_admin_reminder, evening_reminder_trigger,
                                args=(event.id,), id=f'cron_event_{event_id}', replace_existing=True)
    
async def restart_event_reminders():
    events_scheduler.remove_all_jobs()
    upcoming_events = await get_events()
    for event in upcoming_events:
        reminders = await get_event_reminders(event.id)
        if reminders:
            await schedule_custom_reminder(event.id)
        else:
            await schedule_base_event_reminders(event.id)
